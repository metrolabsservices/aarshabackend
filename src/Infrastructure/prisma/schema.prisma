// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//  {
//     question:
//       "Cras non velit nec nisi vulputate nonummy. Maecenas tincidunt lacus at velit. Vivamus vel nulla eget eros elementum pellentesque. Quisque porta volutpat erat. Quisque erat eros, viverra eget, congue eget, semper rutrum, nulla.",
//     questionType: "True or False",
//     options: ["True", "False"],
//     isImage: true,
//     images: ["", "", "", "", ""],
//     boardType: "SSC",
//     toghness: "Easy",
//     subject: "Science",
//     topicName: "Earth Science Discoveries",
//     grade: "Class 10",
//   },

model Questions {
  id          Int @id @default(autoincrement())
  question    String  @db.Text()
  questionType String
  options     String[] @db.Text()
  isImage     Boolean @db.Boolean()
  images      String[] @db.Text()
  boardType   String
  toughness   String
  subject     String
  topicName   String
  grade       String
  createdDate String
  updatedDate String
}

model Student {
  id          Int       @id @default(autoincrement())
  name        String
  gradeNumber String
  schoolName  String
  boardType   String    // CBSE - SSC - IBSE
  status      String    // AWAY - REGULAR - IN-ACTIVE
  previousScore Int
  subjectsAcquired String[]
  joiningDate DateTime
  duration    String
  guardianName String
  guardianPhoneNumber String
  feeCharge   Int
  feeDetails  FeeDetail[]
  subjectStatistics SubjectStatistics[]
}

model FeeDetail {
  id          Int       @id @default(autoincrement())
  amount      Int
  dateOfPaid  DateTime
  paidBy      String
  student     Student   @relation(fields: [studentId], references: [id])
  studentId   Int
}

model SubjectStatistics {
  id          Int       @id @default(autoincrement())
  subjectName String
  subjectScores String[]  // scoredMarks^^^maxMarks^^^DateOfTest^^^GradeNumber^^^
  student     Student   @relation(fields: [studentId], references: [id])
  studentId   Int
}

